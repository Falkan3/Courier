@use "sass:list";

@mixin parent {
	@each $selector in & {
		$l: list.length($selector);

		@if ($l == 1) {
			// @debug "Used parent mixin on a top-level selector";
			@at-root & {
				@content;
			}
		} @else {
			$parent: list.nth($selector, 1);
			@for $i from 2 to $l {
				$parent: append($parent, list.nth($selector, $i));
			}

			@at-root #{$parent} {
				// @debug $parent;
				@content;
			}
		}
	}
}

@function parent-fn($inputSelector, $returnSelector: true) {
	@each $selector in $inputSelector {
		$l: list.length($selector);

		@if ($l == 1) {
			// @debug "Used parent mixin on a top-level selector";
			@if ($returnSelector) {
				@return $selector;
			} @else {
				@return null;
			}
		} @else {
			$parent: list.nth($selector, 1);
			@for $i from 2 to $l {
				$parent: append($parent, list.nth($selector, $i));
			}

			@return $parent;
		}
	}
}

@mixin bottom-most {
	// @debug 'Whole selector length: ' + list.length(&);
	@each $selector in & {
		// @debug 'Selector: ' + $selector;
		$l: list.length($selector);
		@if ($l != 1) {
			// @debug 'Bottom most selector: ' + list.nth($selector, $l);
			@at-root #{list.nth($selector, $l)} {
				@content;
			}
		} @else {
			// @debug 'Bottom most selector: ' + $selector;
			@at-root #{$selector} {
				@content;
			}
		}
	}
}

@function bottom-most-fn($inputSelector) {
	@each $selector in $inputSelector {
		$l: list.length($selector);
		@if ($l != 1) {
			@return list.nth($selector, $l);
		} @else {
			@return $selector;
		}
	}
}
